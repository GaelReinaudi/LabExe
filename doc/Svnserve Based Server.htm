<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Svnserve Based Server</title><link rel="stylesheet" href="Svnserve%20Based%20Server_files/styles_html.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.73.2"><link rel="start" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/index.html" title="TortoiseSVN"><link rel="up" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-repository.html" title="Chapter&nbsp;3.&nbsp;The Repository"><link rel="prev" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup.html" title="Accessing the Repository"><link rel="next" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup-apache.html" title="Apache Based Server"></head><body alink="#0000ff" bgcolor="white" link="#0000ff" text="black" vlink="#840084"><div class="navheader"><table summary="Navigation header" width="100%"><tbody><tr><th colspan="3" align="center">Svnserve Based Server</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup.html">Prev</a>&nbsp;</td><th align="center" width="60%">Chapter&nbsp;3.&nbsp;The Repository</th><td align="right" width="20%">&nbsp;<a accesskey="n" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup-apache.html">Next</a></td></tr></tbody></table><hr></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both;"><a name="tsvn-serversetup-svnserve"></a>Svnserve Based Server</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-1"></a>Introduction</h3></div></div></div><a class="indexterm" name="id573622"></a><p>
			Subversion includes Svnserve - a lightweight stand-alone server
			which uses a custom protocol over an ordinary TCP/IP connection.
			It is ideal for smaller installations, or where a full blown
			Apache server cannot be used.
		</p><p>
			In most cases svnserve is easier to setup and runs faster than
			the Apache based server, although it doesn't have some of the
			advanced features. And now that SASL support is included
			it is easy to secure as well.
		</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-2"></a>Installing svnserve</h3></div></div></div><p>
			</p><div class="orderedlist"><ol type="1"><li><p>
						Get the latest version of Subversion from
						<a class="ulink" href="http://subversion.apache.org/getting.html" target="_top">
							<em class="citetitle">http://subversion.apache.org/getting.html</em>
						</a>.
						Alternatively get a pre-packaged installer from CollabNet at
						<a class="ulink" href="http://www.collab.net/downloads/subversion" target="_top">
							<em class="citetitle">http://www.collab.net/downloads/subversion</em>
						</a>.
						This installer will setup svnserve as a Windows service, and also includes
						some of the tools you need if you are going to use SASL for security.
					</p></li><li><p>
						If you already have a version of Subversion installed, and
						svnserve is running, you will need to stop it before continuing.
					</p></li><li><p>
						Run the Subversion installer. If you run the installer on
						your server (recommended) you can skip step 4.
					</p></li><li><p>
						Open the windows-explorer, go to the
						installation directory of Subversion (usually
						<code class="filename">C:\Program Files\Subversion</code>) and in the
						<code class="filename">bin</code> directory, find the files
						<code class="filename">svnserve.exe</code>,
						<code class="filename">intl3_svn.dll</code>,
						<code class="filename">libapr.dll</code>,
						<code class="filename">libapriconv.dll</code>,
						<code class="filename">libapriutil.dll</code>,
						<code class="filename">libdb*.dll</code>,
						<code class="filename">libeay32.dll</code> and
						<code class="filename">ssleay32.dll</code>
						- copy these files, or just copy all of the <code class="filename">bin</code>
						directory, into a directory on your server e.g.
						<code class="filename">c:\svnserve</code>
					</p></li></ol></div><p>
		</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-3"></a>Running svnserve</h3></div></div></div><p>
			Now that svnserve is installed, you need it running
			on your server.  The simplest approach is to run the following from a DOS
			shell or create a windows shortcut:
</p><pre class="screen">svnserve.exe --daemon
</pre><p>
			svnserve will now start waiting for incoming requests
			on port 3690. The --daemon switch tells svnserve to run
			as a daemon process, so it will always exist until it is manually terminated.
		</p><p>
			If you have not yet created a repository, follow the
			instructions given with the Apache server setup
			<a class="xref" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup-apache.html#tsvn-serversetup-apache-4" title="Configuration">the section called &#8220;Configuration&#8221;</a>.
		</p><p>
			To test that svnserve is working, use
			<span class="guimenu">TortoiseSVN</span> &#8594; <span class="guimenuitem">Repo-Browser</span>
			to view a repository.
		</p><p>
			Assuming your repository is located in
			<code class="filename">c:\repos\TestRepo</code>, and your server is called
			<code class="filename">localhost</code>, enter:
</p><pre class="screen">svn://localhost/repos/TestRepo
</pre><p>
			when prompted by the repo browser.
		</p><p>
			You can also increase security and save time entering URLs with
			svnserve by using the --root switch to set the root
			location and restrict access to a specified directory on the server:
</p><pre class="screen">svnserve.exe --daemon --root drive:\path\to\repository\root
</pre><p>
			Using the previous test as a guide, svnserve would now run as:
</p><pre class="screen">svnserve.exe --daemon --root c:\repos
</pre><p>
			And in TortoiseSVN our repo-browser URL is now shortened to:
</p><pre class="screen">svn://localhost/TestRepo
</pre><p>
			Note that the --root switch is also needed if your repository is located 
			on a different partition or drive than the location of svnserve 
			on your server.
		</p><p>
			Svnserve will service any number of repositories. Just locate them somewhere
			below the root folder you just defined, and access them using a URL relative
			to that root.
		</p><div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Warning</h3><p>
				Do not create or access a Berkeley DB repository on a network share.
				It <span class="emphasis"><em>cannot</em></span> exist on a remote filesystem.
				Not even if you have the network drive mapped to a drive letter.
				If you attempt to use Berkeley DB on a network share,
				the results are unpredictable - you may see mysterious errors
				right away, or it may be months before you discover that your
				repository database is subtly corrupted.
			</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="tsvn-serversetup-svnservice"></a>Run svnserve as a Service</h4></div></div></div><a class="indexterm" name="id573389"></a><p>
				Running svnserve as a user is usually not the best way.
				It means always having a user logged in on your server,
				and remembering to restart it after a reboot. A better way is to run 
				svnserve as a windows service. Starting with Subversion 1.4,
				svnserve can be installed as a native windows service.
			</p><p>
				To install svnserve as a native windows service, execute the following
				command all on one line to create a service which is automatically
				started when windows starts.
</p><pre class="screen">sc create svnserve binpath= "c:\svnserve\svnserve.exe --service 
    --root c:\repos" displayname= "Subversion" depend= tcpip 
    start= auto
</pre><p>
				If any of the paths include spaces, you have to use (escaped) quotes
				around the path, like this:
</p><pre class="screen">sc create svnserve binpath= "
    \"C:\Program Files\Subversion\bin\svnserve.exe\"
    --service --root c:\repos" displayname= "Subversion" 
    depend= tcpip start= auto
</pre><p>
				You can also add a description after creating the service. This
				will show up in the Windows Services Manager.
</p><pre class="screen">sc description svnserve "Subversion server (svnserve)"
</pre><p>
			</p><p>
				Note the rather unusual command line format used by <code class="literal">sc</code>.
				In the <code class="literal">key= value</code> pairs there must be no space between
				the key and the <code class="literal">=</code> but there must be a space before the
				value.
			</p><div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Tip</h3><p>
					Microsoft now recommend services to be run as under either the
					Local Service or Network Service account. Refer to
					<a class="ulink" href="http://www.microsoft.com/technet/security/topics/serversecurity/serviceaccount/default.mspx" target="_top">
						<em class="citetitle">The Services and Service Accounts Security Planning Guide</em>
					</a>.
					To create the service under the Local Service account, append the
					following to the example above.
</p><pre class="screen">obj= "NT AUTHORITY\LocalService"
</pre><p>
					Note that you would have to give the Local Service account
					appropriate rights to both Subversion and your repositories,
					as well as any applications which are used by hook scripts.
					The built-in group for this is called "LOCAL SERVICE".
				</p></div><p>
				Once you have installed the service, you need to go to the services
				manager to start it (this time only; it will start automatically when
				the server reboots).
			</p><p>
				For more detailed information, refer to
				<a class="ulink" href="http://svn.collab.net/repos/svn/trunk/notes/windows-service.txt" target="_top">
					<em class="citetitle">Windows Service Support for Svnserve</em>
				</a>.
			</p><p>
				If you installed an earlier version of svnserve using the
				<code class="literal">SVNService</code> wrapper, and you now want to use
				the native support instead, you will need to unregister the wrapper
				as a service (remember to stop the service first!).
				Simply use the command
</p><pre class="screen">svnservice -remove
</pre><p>
				to remove the service registry entry.
			</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-4"></a>Basic Authentication with svnserve</h3></div></div></div><p>
			The default svnserve setup provides anonymous read-only access.
			This means that you can use an <code class="literal">svn://</code> URL
			to checkout and update, or use the repo-browser in TortoiseSVN
			to view the repository, but you won't be able to commit any changes.
		</p><p>
			To enable write access to a repository, you need to edit the
			<code class="filename">conf/svnserve.conf</code> file in your repository
			directory.  This file controls the configuration of the
			svnserve daemon, and also contains useful documentation.
		</p><p>
			You can enable anonymous write access by simply setting:
</p><pre class="screen">[general]
anon-access = write
</pre><p>
			However, you will not know who has made changes to a repository,
			as the <code class="literal">svn:author</code> property will be empty.
			You will also be unable to control who makes changes to a
			repository.  This is a somewhat risky setup!
		</p><p>
			One way to overcome this is to create a password database:
</p><pre class="screen">[general]
anon-access = none
auth-access = write
password-db = userfile
</pre><p>
			Where <code class="filename">userfile</code> is a file which exists in
			the same directory as <code class="filename">svnserve.conf</code>.  This
			file can live elsewhere in your file system (useful for when you
			have multiple repositories which require the same access rights)
			and may be referenced using an absolute path, or a path
			relative to the <code class="filename">conf</code> directory.
			If you include a path, it must be written
			<code class="filename">/the/unix/way</code>.
			Using \ or drive letters will not work.
			The <code class="filename">userfile</code> should have a structure of:
</p><pre class="screen">[users]
username = password
...
</pre><p>
			This example would deny all access for unauthenticated
			(anonymous) users, and give read-write access to users listed
			in <code class="filename">userfile</code>.
		</p><div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Tip</h3><p>
				If you maintain multiple repositories using the same password 
				database, the use of an authentication realm will make life 
				easier for users, as TortoiseSVN can cache your credentials 
				so that you only have to enter them once.  More information 
				can be found in the Subversion book, specifically in the 
				sections
				<a class="ulink" href="http://svnbook.red-bean.com/en/1.5/svn.serverconfig.svnserve.html#svn.serverconfig.svnserve.auth.users" target="_top">
					<em class="citetitle">Create a 'users' file and realm</em> 
				</a>
				and 
				<a class="ulink" href="http://svnbook.red-bean.com/en/1.5/svn.serverconfig.netmodel.html#svn.serverconfig.netmodel.credcache" target="_top">
					<em class="citetitle">Client Credentials Caching</em>
				</a>
			</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-sasl"></a>Better Security with SASL</h3></div></div></div><a class="indexterm" name="id573185"></a><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="tsvn-serversetup-svnserve-sasl-whatis"></a>What is SASL?</h4></div></div></div><p>
				The Cyrus Simple Authentication and Security Layer is
				open source software written by Carnegie Mellon University.
				It adds generic authentication and encryption capabilities
				to any network protocol, and as of Subversion 1.5 and later,
				both the svnserve server and TortoiseSVN client know how to
				make use of this library.
			</p><p>
				For a more complete discussion of the options available, you should
				look at the Subversion book in the section
				<a class="ulink" href="http://svnbook.red-bean.com/en/1.5/svn.serverconfig.svnserve.html#svn.serverconfig.svnserve.sasl" target="_top">
					<em class="citetitle">Using svnserve with SASL</em>
				</a>.
				If you are just looking for a simple way to set up secure
				authentication and encryption on a Windows server, so that your
				repository can be accessed safely over the big bad Internet,
				read on.
			</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="tsvn-serversetup-svnserve-sasl-auth"></a>SASL Authentication</h4></div></div></div><p>
				To activate specific SASL mechanisms on the server, you'll
				need to do three things. First, create a <code class="literal">[sasl]</code>
				section in your repository's <code class="filename">svnserve.conf</code>
				file, with this key-value pair:
</p><pre class="screen">use-sasl = true
</pre><p>
			</p><p>
				Second, create a file called <code class="filename">svn.conf</code> in a
				convenient location - typically in the directory where subversion
				is installed.
			</p><p>
				Thirdly, create two new registry entries to tell SASL where to
				find things. Create a registry key named
				<code class="literal">[HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie Mellon\Project Cyrus\SASL Library]</code>
				and place two new string values inside it:
				<code class="literal">SearchPath</code> set to the directory path containing
				the <code class="filename">sasl*.dll</code> plug-ins (normally in the
				Subversion install directory), and <code class="literal">ConfFile</code> set
				to the directory containing the <code class="filename">svn.conf</code> file.
				If you used the CollabNet installer, these registry keys will already
				have been created for you.
			</p><p>
				Edit the <code class="filename">svn.conf</code> file to contain the following:

</p><pre class="screen">pwcheck_method: auxprop
auxprop_plugin: sasldb
mech_list: DIGEST-MD5
sasldb_path: C:\TortoiseSVN\sasldb
</pre><p>
				The last line shows the location of the authentication database,
				which is a file called <code class="filename">sasldb</code>.
				This could go anywhere, but a convenient choice is the repository
				parent path. Make sure that the svnserve service has read access
				to this file.
			</p><p>
				If svnserve was already running, you will need to restart it to
				ensure it reads the updated configuration.
			</p><p>
				Now that everything is set up, all you need to do is create some
				users and passwords. To do this you need the
				<code class="literal">saslpasswd2</code> program. If you used the CollabNet
				installer, that program will be in the install directory.
				Use a command something like this:
</p><pre class="screen">saslpasswd2 -c -f C:\TortoiseSVN\sasldb -u realm username
</pre><p>
				The <code class="literal">-f</code> switch gives the database location,
				<code class="literal">realm</code> must be the same as the value you
				defined in your repository's <code class="filename">svnserve.conf</code>
				file, and username is exactly what you expect it to be.
				Note that the realm is not allowed to contain space characters.
			</p><p>
				You can list the usernames stored in the database using the
				<code class="literal">sasldblistusers2</code> program.
			</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="tsvn-serversetup-svnserve-sasl-encrypt"></a>SASL Encryption</h4></div></div></div><p>
				To enable or disable different levels of encryption, you can
				set two values in your repository's
				<code class="filename">svnserve.conf</code> file:
</p><pre class="screen">[sasl]
use-sasl = true
min-encryption = 128
max-encryption = 256
</pre><p>
			</p><p>
				The <code class="literal">min-encryption</code> and
				<code class="literal">max-encryption</code> variables control the
				level of encryption demanded by the server. To disable
				encryption completely, set both values to 0. To enable
				simple checksumming of data (i.e., prevent tampering and
				guarantee data integrity without encryption), set both
				values to 1. If you wish to allow (but not require) encryption,
				set the minimum value to 0, and the maximum value to some
				bit-length. To require encryption unconditionally, set both
				values to numbers greater than 1. In our previous example,
				we require clients to do at least 128-bit encryption,
				but no more than 256-bit encryption.
			</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-5"></a>Authentication with svn+ssh</h3></div></div></div><p>
			Another way to authenticate users with a svnserve
			based server is to use a secure shell (SSH) to tunnel
			requests through. It is not as simple to set up as SASL,
			but it may be useful is some cases.
		</p><p>
			With this approach, svnserve is not run as a daemon
			process, rather, the secure shell starts svnserve
			for you, running it as the SSH authenticated user. To
			enable this, you need a secure shell daemon on your server.
		</p><p>
			A basic method for setting up your server is given in
			<a class="xref" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-ssh-howto.html" title="Appendix&nbsp;G.&nbsp;Securing Svnserve using SSH">Appendix&nbsp;G, <i>Securing Svnserve using SSH</i></a>.
			You can find other SSH topics within the FAQ by searching
			for &#8220;<span class="quote">SSH</span>&#8221;.
		</p><p>
			Further information about svnserve can be found in the
			<a class="ulink" href="http://svnbook.red-bean.com/" target="_top">
				<em class="citetitle">Version Control with Subversion</em>
			</a>.
		</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="tsvn-serversetup-svnserve-6"></a>Path-based Authorization with svnserve</h3></div></div></div><p>
			Starting with Subversion 1.3, svnserve supports the same
			<code class="literal">mod_authz_svn</code> path-based authorization scheme
			that is available with the Apache server. You need to edit the
			<code class="filename">conf/svnserve.conf</code> file in your repository
			directory and add a line referring to your authorization file.
</p><pre class="screen">[general]
authz-db = authz
</pre><p>
			Here, <code class="filename">authz</code> is a file you create to define
			the access permissions. You can use a separate file for each
			repository, or you can use the same file for several repositories.
			Read <a class="xref" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup-apache.html#tsvn-serversetup-mod_authz_svn" title="Path-Based Authorization">the section called &#8220;Path-Based Authorization&#8221;</a>
			for a description of the file format.
		</p></div></div><div class="navfooter"><hr><table summary="Navigation footer" width="100%"><tbody><tr><td align="left" width="40%"><a accesskey="p" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup.html">Prev</a>&nbsp;</td><td align="center" width="20%"><a accesskey="u" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-repository.html">Up</a></td><td align="right" width="40%">&nbsp;<a accesskey="n" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-serversetup-apache.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">Accessing the Repository&nbsp;</td><td align="center" width="20%"><a accesskey="h" href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/index.html">Home</a></td><td align="right" valign="top" width="40%">&nbsp;Apache Based Server</td></tr></tbody></table></div></body></html>